# üö¶ Feux de Circulation Intelligents avec Microservices

## Description du Projet

Ce projet vise √† d√©velopper un syst√®me **intelligent de gestion des feux de circulation** bas√© sur des microservices pour analyser les flux de v√©hicules et optimiser la r√©gulation du trafic. Il utilise plusieurs technologies modernes comme **YOLOv8** pour la d√©tection des v√©hicules, **MQTT** pour la communication IoT, et des outils d'IA pour la prise de d√©cision intelligente.

---

## üõ†Ô∏è **Architecture du Projet**

Le projet utilise **5 microservices** distincts pour assurer une architecture modulaire et performante :

1. **Microservice 1 : IoT Sensor (ESP8266)**
   - Capteurs connect√©s pour la collecte des donn√©es environnementales (humidit√©, temp√©rature) et luminosit√©.
   - Communication via le protocole **MQTT** vers **Node-RED**.
   - **Technologies** : ESP8266, MQTT, DHT11, Mosquitto.

2. **Microservice 2 : Node-RED**
   - Orchestration des donn√©es IoT et traitement des informations envoy√©es par les capteurs.
   - Interface utilisateur via le **Node-RED Dashboard** et **Worldmap**.
   - **Technologies** : Node-RED, MQTT, HTTP.

3. **Microservice 3 : D√©tection des V√©hicules**
   - D√©tection en temps r√©el des v√©hicules et des pi√©tons via **YOLOv8**.
   - Transmission des r√©sultats via API **HTTP** vers **Flutter** pour affichage sur une carte.
   - **Technologies** : Ultralytics YOLOv8, Python.

4. **Microservice 4 : Frontend Flutter (Mobile App)**
   - Affichage de l‚Äô√©tat des feux, des statistiques de trafic, et localisation des v√©hicules via **OpenStreetMap**.
   - Int√©gration d‚Äôun chatbot pour les requ√™tes utilisateurs.
   - **Technologies** : Flutter, OpenStreetMap, API Flask.

5. **Microservice 5 : IA et Prise de D√©cision**
   - Utilisation de mod√®les **Hugging Face** pour l‚Äôanalyse des donn√©es textuelles.
   - Gestion des requ√™tes via **LangChain** et stockage des vecteurs avec **FAISS**.
   - Serveur backend utilisant **Flask**.
   - **Technologies** : Hugging Face, LangChain, FAISS, Flask.

---

## üîó **Flux de Donn√©es**

1. Les capteurs IoT transmettent les donn√©es via **MQTT** ‚Üí **Node-RED**.
2. **YOLOv8** d√©tecte les v√©hicules et pi√©tons ‚Üí transmet les r√©sultats via MQTT.
3. Les r√©sultats sont affich√©s sur une carte **OpenStreetMap** via l'application **Flutter**.
4. Le serveur backend avec **Flask** g√®re les d√©cisions IA gr√¢ce aux mod√®les de **Hugging Face** et **FAISS**.
5. **Node-RED Dashboard** offre une visualisation des donn√©es IoT et de la situation du trafic.

---

## üõ†Ô∏è **Technologies Utilis√©es**

- **IoT** : ESP8266, MQTT, Mosquitto
- **Backend** : Flask, Python
- **IA** : Hugging Face, LangChain, FAISS,Llama2
- **D√©tection d'Objets** : YOLOv8 (Ultralytics)
- **Orchestration** : Node-RED
- **Frontend** : Flutter, OpenStreetMap

---

## ‚öôÔ∏è **Installation et Ex√©cution**

1. **ESP8266** :
   - Configurez le code Arduino pour la communication MQTT.
   - Assurez-vous d‚Äôavoir un broker MQTT (Mosquitto) en fonctionnement.

2. **Node-RED** :
   - Installez Node-RED via npm :
     ```bash
     npm install -g node-red
     ```
   - Importez le flow Node-RED fourni (`flow.json`).

3. **D√©tection des V√©hicules (YOLOv8)** :
   - Installez Ultralytics :
     ```bash
     pip install ultralytics
     ```
   - Ex√©cutez le mod√®le YOLOv8 avec votre flux vid√©o.

4. **Backend Flask** :
   - Installez les d√©pendances :
     ```bash
     pip install flask langchain faiss-cpu transformers
     ```
   - Lancez le serveur Flask :
     ```bash
     python app.py
     ```

5. **Frontend Flutter** :
   - Installez Flutter depuis [flutter.dev](https://flutter.dev/).
   - Connectez l‚Äôapplication √† l‚ÄôAPI Flask.

---

## üìä **R√©sultats Attendus**

- R√©gulation dynamique des feux en fonction du trafic d√©tect√©.
- Visualisation des donn√©es IoT et trafic via des dashboards interactifs.
- Communication fluide entre les microservices pour une optimisation en temps r√©el.

---


